<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on Nature</title>
    <link>https://yangziran.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on Nature</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 01 Jun 2020 16:02:06 +0800</lastBuildDate>
    
	<atom:link href="https://yangziran.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sharding-JDBC预研报告</title>
      <link>https://yangziran.com/posts/1590998525/</link>
      <pubDate>Mon, 01 Jun 2020 16:02:06 +0800</pubDate>
      
      <guid>https://yangziran.com/posts/1590998525/</guid>
      <description>背景 面对日益增加的系统访问量，数据库的吞吐量面临着巨大瓶颈。 传统的将数据集中存储至单一数据节点的解决方案，在性能、可用性和运维成本这三方面已经难于满足互联网的海量数据场景。 通过分库和分表进行数据的拆分来使得各个表的数据量保持在阈值以下，以及对流量进行疏导应对高访问量，是应对高并发和海量数据系统的有效手段。 读写分离的数据节点中的数据内容是一致的，而水平分片的每个数据节点的数据内容却并不相同。将水平分片和读写分离联合使用，能够更加有效的提升系统性能。 Sharding-JDBC简介 ShardingSphere是一套开源的分布式数据库中间件解决方案组成的生态圈，它由Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar（计划中）这3款相互独立的产品组成。 他们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如Java同构、异构语言、云原生等各种多样化的应用场景。 Sharding-JDBC采用无中心化架构，定位为轻量级Java框架，在Java的JDBC层提供的额外服务。它使用客户端直连数据库，以Jar包的形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。
 适用于任何基于JDBC的ORM框架，如：JPA、Hibernate、MyBatis、Spring JDBC Template或直接使用JDBC。 支持任何第三方的数据库连接池，如：DBCP、C3P0、BoneCP、Druid、HikariCP等。 支持任意实现JDBC规范的数据库。目前支持MySQL、Oracle、SQLServer、PostgreSQL以及任何遵循SQL92标准的数据库。 技术架构 整体架构： 采用客户端直连数据库的方式，以Jar包形式提供服务，无需额外部署和依赖。  读写分离： 是根据SQL语义的分析，将读操作和写操作分别路由至主库与从库。在主从模式中，同一个事物中的读写均用主库。 数据分片： 流程核心由 SQL解析 -&amp;gt; 执行器优化 -&amp;gt; SQL路由 -&amp;gt; SQL改写 -&amp;gt; SQL执行 -&amp;gt; 结果归并 组成。
SQL解析： 分为词法解析和语法解析。先通过词法解析器将SQL拆分为一个个不可再分的单词，再使用语法解析器对SQL进行理解，并最终提炼出解析上下文。解析上下文包括表、选择项、排序项、分组项、聚合函数、分页信息、查询条件以及可能需要修改的占位符标记。
执行器优化： 合并和优化分片条件，如OR等。
SQL路由： 根据解析上下文匹配用户配置的分片策略，并生成路由路径。
SQL改写： 将SQL改写为在真实数据库中可以正确执行的语句。SQL改写分为正确性改写和优化改写。
SQL执行： 通过多线程执行器异步执行。
结果归并： 将多个执行结果集归并，以便于通过统一的JDBC接口输出。结果归并包括流式归并、内存归并和使用装饰者模式的追加归并这几种方式。
技术对比 经过了解，目前主流的一些数据库中间件存在两类思想：中间层代理（Proxy）、增强版JDBC驱动（Client）。市面上这两类比较有代表性的组件分别为Mycat和Sharding-JDBC，以下就对比这两组件： Mycat	Sharing-JDBC 模式	Proxy	Client 异构语言	任意	仅Java 性能	损耗略高	损耗低 优点	多语言支持、对业务开发透明	实现简单、天然去中心化、无需额外部署、无其他依赖 缺点	实现复杂、本身需要高可用、存在中心化	需要业务自行升级、支持的开发语言单一 存在的限制	部分SQL还不能很好的支持：Join，Insert into，跨分片的事务，分片的表不能Lock Table，在order、g’roup、sum、count条件下会出兼容问题 Hibernate无法完全支持 事务处理需要手动控制才能提示性能	DataSource接口不支持timeout相关操作 Connection接口不支持存储过程、函数、游标等操作 Statement和PreparedStatement接口不支持返回多结果集的语句和国际化字符的操作 ResultSet接口不支持对结果集指针位置判断、不支持通过非next方法改变结果指针位置、不支持修改结果集 不支持JDBC4.</description>
    </item>
    
    <item>
      <title>MySQL 5.7.28 主从复制-gtid</title>
      <link>https://yangziran.com/posts/1585664661/</link>
      <pubDate>Tue, 31 Mar 2020 22:24:21 +0800</pubDate>
      
      <guid>https://yangziran.com/posts/1585664661/</guid>
      <description>MySQL 5.6开始引入了GTID的概念，那么GTID是何方神圣？其实就是一个全局事务标识符。使用GTID时，每次事务提交都会在binlog里生成一个唯一的标识符，它由UUID和事务ID组成。首次提交的事务ID为1，第二次为2，第三次为3，以此类推。UUID是服务器的身份ID，在第一次启动MySQL时，会自动生成一个server_uuid，并且默认写入到数据库下的auto.cnf文件里。无需修改，也不建议修改。
基于GTID的主从复杂好处：
 1、在传统的复制里面，当发生故障需要主从切换，需要找到binlog和pos点，然后change master to 指向新的master，相对来说比较麻烦，也容易出错。在MySQL 5.6里面，不用再找binlog和pos点，只需要知道master的ip、port以及账号密码就行，因为复制是自动的，MySQL会通过内部机制GTID自动找点同步。 2、多线程复制（基于库）。在MySQL 5.6以前的版本，slave的复制是单线程的，而master是并发写入的，所以延时是避免不了的。唯一有效的方法是吧多个库放在多台slave，这样又浪费服务器。在MySQL 5.6里面，我们可以把多个表放在多个库，这样就可以使用多线程复制，当只有1个库，多线程复制是没有用的。  GTID相关特性默认是关闭的，使用：show variables like ‘%gtid%’; 查看。GTID不支持MyISAM表（GTID是基于食物的），对CREATE TABLE ….. SELECT 语句不支持。
基于GTID的主从复制配置如下（master和slave一样，不需要server-id，其他步骤与传统复制一致）：
 gtid-mode=ON enforce-grid-consistency=ON log-bin=mysql-bin  多线程复制由参数 slave-paralles-workers 控制，设定从服务器的SQL线程数，0表示关闭多线程复制，默认为0，最大考验设置为1024个线程。在从库的配置文件[mysqld]段落添加。
参考官方文档： https://dev.mysql.com/doc/refman/5.7/en/replication-gtids-howto.html
https://mariadb.com/kb/en/setting-up-replication/</description>
    </item>
    
    <item>
      <title>MySQL 5.7.28 主从复制-binlog</title>
      <link>https://yangziran.com/posts/1585664478/</link>
      <pubDate>Tue, 31 Mar 2020 22:21:18 +0800</pubDate>
      
      <guid>https://yangziran.com/posts/1585664478/</guid>
      <description>1、创建同步用户 mysql&amp;gt; grant replication slave on *.* to ‘用户名’@‘主机’ identified by ‘密码’; 说明：主机用%表示所有网段都可以访问，用192.168.1.%表示192.168.1.1~255间的主机都可以访问，用具体IP则只能是指定主机访问。 mysql&amp;gt; flush privileges; 说明：刷新权限数据，将权限信息从内存中写入数据库。  2、配置数据库 在my.cnf文件中的[mysqld]下面添加： log-bin=mysql-bin server-id=1 说明：在修改my.cnf之前先停止mysqld服务。bin-log需要两台机值一致，server-id不能一样。两台数据库配置完并重启才能进行下一步。  3、设置主从同步 mysql&amp;gt; change master to master_host=‘Master地址’, master_port=Master端口, master_user=‘同步账号用户名’, master_password=‘同步账号密码’, master_log_file=&#39;mysql-bin.000001&#39;, master_log_pos=600; 说明：master_log_file和master_log_pos通过在主库执行 show master status; 命令取得，对应字段是 File 和 Position 。  4、开始同步 在从库执行 start slave; 启动slave线程开始同步。在从库利用 show slave status; 命令查看同步状态，如果看到 Slave_lo_State 字段有：Waiting for master to send event … 则表示同步成功。  其他参数：   replicate-wild-do-db、replicate-wild-do-table、replicate-wild-ignore-db、replicate-wild-ignore-table 解决主从架构MySQL跨库更新问题。
  log-slave-updates=1 从库更新也写binlog，主要用于链式复制，从库作为另一个库的主库，或者HA架构中从库可升级为主库。</description>
    </item>
    
    <item>
      <title>CentOS 7.7.1908 安装 MySQL 5.7.28-*.rpm-bundle.tar</title>
      <link>https://yangziran.com/posts/1584208079/</link>
      <pubDate>Sun, 15 Mar 2020 01:47:59 +0800</pubDate>
      
      <guid>https://yangziran.com/posts/1584208079/</guid>
      <description>1、卸载系统自带的mariadb-lib # rpm -qa|grep mariadb // mariadb-libs-5.5.64-1.el7.x86_64 # rpm -e mariadb-libs-5.5.64-1.el7.x86_64 —nodeps  2、下载mysql 5.7.28-*.rpm-bundle.tar包并解压 # tar -xvf mysql-5.7.28-1.el7.x86_64.rpm-bundle.tar  3、安装 依次执行（几个包有依赖关系，需要按顺序）下面命令安装 # rpm -ivh mysql-community-common-5.7.28-1.el7.x86_64.rpm # rpm -ivh mysql-community-libs-5.7.28-1.el7.x86_64.rpm # rpm -ivh mysql-community-client-5.7.28-1.el7.x86_64.rpm # rpm -ivh mysql-community-server-5.7.28-1.el7.x86_64.rpm  4、运行并添加开机启动 # systemctl enable mysqld // 添加开机启动 # systemctl start mysqld // 启动MySQL服务  5、登录并修改密码 在上一步启动MySQL服务的时候，会初始化MySQL并为root用户生成默认密码并将该密码标记为过期，登录后需要设置一个新的密码。 # cat /var/log/mysqld.log // 查看MySQL日志，搜索到：A temporary password is generated for root@localhost 后面就是生成的默认密码 # mysql -uroot -p // 用root用户登录MySQL mysql&amp;gt; alter user ‘root’@‘localhost’ identified by ‘新密码’; // 密码要求：长度最少8位，大小写和特殊字符组成 mysql&amp;gt; create user ‘新用户’ identified by ‘新密码’; // 创建远程登录用户 mysql&amp;gt; grant all on *.</description>
    </item>
    
  </channel>
</rss>