<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sharding-JDBC on Nature</title>
    <link>https://yangziran.com/tags/sharding-jdbc/</link>
    <description>Recent content in Sharding-JDBC on Nature</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 01 Jun 2020 16:02:06 +0800</lastBuildDate>
    
	<atom:link href="https://yangziran.com/tags/sharding-jdbc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sharding-JDBC预研报告</title>
      <link>https://yangziran.com/posts/1590998525/</link>
      <pubDate>Mon, 01 Jun 2020 16:02:06 +0800</pubDate>
      
      <guid>https://yangziran.com/posts/1590998525/</guid>
      <description>背景 面对日益增加的系统访问量，数据库的吞吐量面临着巨大瓶颈。 传统的将数据集中存储至单一数据节点的解决方案，在性能、可用性和运维成本这三方面已经难于满足互联网的海量数据场景。 通过分库和分表进行数据的拆分来使得各个表的数据量保持在阈值以下，以及对流量进行疏导应对高访问量，是应对高并发和海量数据系统的有效手段。 读写分离的数据节点中的数据内容是一致的，而水平分片的每个数据节点的数据内容却并不相同。将水平分片和读写分离联合使用，能够更加有效的提升系统性能。 Sharding-JDBC简介 ShardingSphere是一套开源的分布式数据库中间件解决方案组成的生态圈，它由Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar（计划中）这3款相互独立的产品组成。 他们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如Java同构、异构语言、云原生等各种多样化的应用场景。 Sharding-JDBC采用无中心化架构，定位为轻量级Java框架，在Java的JDBC层提供的额外服务。它使用客户端直连数据库，以Jar包的形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。
 适用于任何基于JDBC的ORM框架，如：JPA、Hibernate、MyBatis、Spring JDBC Template或直接使用JDBC。 支持任何第三方的数据库连接池，如：DBCP、C3P0、BoneCP、Druid、HikariCP等。 支持任意实现JDBC规范的数据库。目前支持MySQL、Oracle、SQLServer、PostgreSQL以及任何遵循SQL92标准的数据库。 技术架构 整体架构： 采用客户端直连数据库的方式，以Jar包形式提供服务，无需额外部署和依赖。  读写分离： 是根据SQL语义的分析，将读操作和写操作分别路由至主库与从库。在主从模式中，同一个事物中的读写均用主库。 数据分片： 流程核心由 SQL解析 -&amp;gt; 执行器优化 -&amp;gt; SQL路由 -&amp;gt; SQL改写 -&amp;gt; SQL执行 -&amp;gt; 结果归并 组成。
SQL解析： 分为词法解析和语法解析。先通过词法解析器将SQL拆分为一个个不可再分的单词，再使用语法解析器对SQL进行理解，并最终提炼出解析上下文。解析上下文包括表、选择项、排序项、分组项、聚合函数、分页信息、查询条件以及可能需要修改的占位符标记。
执行器优化： 合并和优化分片条件，如OR等。
SQL路由： 根据解析上下文匹配用户配置的分片策略，并生成路由路径。
SQL改写： 将SQL改写为在真实数据库中可以正确执行的语句。SQL改写分为正确性改写和优化改写。
SQL执行： 通过多线程执行器异步执行。
结果归并： 将多个执行结果集归并，以便于通过统一的JDBC接口输出。结果归并包括流式归并、内存归并和使用装饰者模式的追加归并这几种方式。
技术对比 经过了解，目前主流的一些数据库中间件存在两类思想：中间层代理（Proxy）、增强版JDBC驱动（Client）。市面上这两类比较有代表性的组件分别为Mycat和Sharding-JDBC，以下就对比这两组件： Mycat	Sharing-JDBC 模式	Proxy	Client 异构语言	任意	仅Java 性能	损耗略高	损耗低 优点	多语言支持、对业务开发透明	实现简单、天然去中心化、无需额外部署、无其他依赖 缺点	实现复杂、本身需要高可用、存在中心化	需要业务自行升级、支持的开发语言单一 存在的限制	部分SQL还不能很好的支持：Join，Insert into，跨分片的事务，分片的表不能Lock Table，在order、g’roup、sum、count条件下会出兼容问题 Hibernate无法完全支持 事务处理需要手动控制才能提示性能	DataSource接口不支持timeout相关操作 Connection接口不支持存储过程、函数、游标等操作 Statement和PreparedStatement接口不支持返回多结果集的语句和国际化字符的操作 ResultSet接口不支持对结果集指针位置判断、不支持通过非next方法改变结果指针位置、不支持修改结果集 不支持JDBC4.</description>
    </item>
    
  </channel>
</rss>