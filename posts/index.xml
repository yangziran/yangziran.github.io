<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Nature</title>
    <link>https://yangziran.com/posts/</link>
    <description>Recent content in Posts on Nature</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 31 Mar 2020 22:24:21 +0800</lastBuildDate>
    
	<atom:link href="https://yangziran.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MySQL 5.7.28 主从复制-gtid</title>
      <link>https://yangziran.com/posts/1585664661/</link>
      <pubDate>Tue, 31 Mar 2020 22:24:21 +0800</pubDate>
      
      <guid>https://yangziran.com/posts/1585664661/</guid>
      <description>MySQL 5.6开始引入了GTID的概念，那么GTID是何方神圣？其实就是一个全局事务标识符。使用GTID时，每次事务提交都会在binlog里生成一个唯一的标识符，它由UUID和事务ID组成。首次提交的事务ID为1，第二次为2，第三次为3，以此类推。UUID是服务器的身份ID，在第一次启动MySQL时，会自动生成一个server_uuid，并且默认写入到数据库下的auto.cnf文件里。无需修改，也不建议修改。
基于GTID的主从复杂好处：
 1、在传统的复制里面，当发生故障需要主从切换，需要找到binlog和pos点，然后change master to 指向新的master，相对来说比较麻烦，也容易出错。在MySQL 5.6里面，不用再找binlog和pos点，只需要知道master的ip、port以及账号密码就行，因为复制是自动的，MySQL会通过内部机制GTID自动找点同步。 2、多线程复制（基于库）。在MySQL 5.6以前的版本，slave的复制是单线程的，而master是并发写入的，所以延时是避免不了的。唯一有效的方法是吧多个库放在多台slave，这样又浪费服务器。在MySQL 5.6里面，我们可以把多个表放在多个库，这样就可以使用多线程复制，当只有1个库，多线程复制是没有用的。  GTID相关特性默认是关闭的，使用：show variables like ‘%gtid%’; 查看。GTID不支持MyISAM表（GTID是基于食物的），对CREATE TABLE ….. SELECT 语句不支持。
基于GTID的主从复制配置如下（master和slave一样，不需要server-id，其他步骤与传统复制一致）：
 gtid-mode=ON enforce-grid-consistency=ON log-bin=mysql-bin  多线程复制由参数 slave-paralles-workers 控制，设定从服务器的SQL线程数，0表示关闭多线程复制，默认为0，最大考验设置为1024个线程。在从库的配置文件[mysqld]段落添加。
参考官方文档： https://dev.mysql.com/doc/refman/5.7/en/replication-gtids-howto.html
https://mariadb.com/kb/en/setting-up-replication/</description>
    </item>
    
    <item>
      <title>MySQL 5.7.28 主从复制-binlog</title>
      <link>https://yangziran.com/posts/1585664478/</link>
      <pubDate>Tue, 31 Mar 2020 22:21:18 +0800</pubDate>
      
      <guid>https://yangziran.com/posts/1585664478/</guid>
      <description>1、创建同步用户 mysql&amp;gt; grant replication slave on *.* to ‘用户名’@‘主机’ identified by ‘密码’; 说明：主机用%表示所有网段都可以访问，用192.168.1.%表示192.168.1.1~255间的主机都可以访问，用具体IP则只能是指定主机访问。 mysql&amp;gt; flush privileges; 说明：刷新权限数据，将权限信息从内存中写入数据库。  2、配置数据库 在my.cnf文件中的[mysqld]下面添加： log-bin=mysql-bin server-id=1 说明：在修改my.cnf之前先停止mysqld服务。bin-log需要两台机值一致，server-id不能一样。两台数据库配置完并重启才能进行下一步。  3、设置主从同步 mysql&amp;gt; change master to master_host=‘Master地址’, master_port=Master端口, master_user=‘同步账号用户名’, master_password=‘同步账号密码’, master_log_file=&#39;mysql-bin.000001&#39;, master_log_pos=600; 说明：master_log_file和master_log_pos通过在主库执行 show master status; 命令取得，对应字段是 File 和 Position 。  4、开始同步 在从库执行 start slave; 启动slave线程开始同步。在从库利用 show slave status; 命令查看同步状态，如果看到 Slave_lo_State 字段有：Waiting for master to send event … 则表示同步成功。  其他参数：   replicate-wild-do-db、replicate-wild-do-table、replicate-wild-ignore-db、replicate-wild-ignore-table 解决主从架构MySQL跨库更新问题。
  log-slave-updates=1 从库更新也写binlog，主要用于链式复制，从库作为另一个库的主库，或者HA架构中从库可升级为主库。</description>
    </item>
    
    <item>
      <title>运维常说的 5个9、4个9、3个9 的可靠性，到底是什么？</title>
      <link>https://yangziran.com/posts/1585456431/</link>
      <pubDate>Sun, 29 Mar 2020 12:33:59 +0800</pubDate>
      
      <guid>https://yangziran.com/posts/1585456431/</guid>
      <description>在系统的高可用性（也称为可用性，英文描述为HA，High Available）里有个衡量其可靠性的标准—X个9，这个X是代表数字 3~5。X个9表示在系统1年时间的使用过程中，系统可以正常使用时间与总时间（1年）之比，我们通过下面的计算来感受X个9在不同级别的可靠性差异。
 3个9：(1-99.9%)*365*24=8.76小时，表示该系统在连续运行1年时间里最多可能的业务中断时间是8.76小时。 4个9：(1-99.99%)*365*24=0.876小时=52.6分钟，表示该系统在连续运行1时间里最多可能的业务中断时间是52.6分钟。 5个9：(1-99.999%)*365*24*60=5.26分钟，表示该系统在连续运行1年时间里最多可能的业务中断时间是5.26分钟。  那么X个9里面的X只代表数字3~5，为什么没有1~2，也没有大于5的呢？接着往下计算：
 1个9：(1-90%)*365=36.5天 2个9：(1-99%)*365=3.65天 6个9：(1-99.9999%)*365*24*60*60=31秒  可以看到1个9和2个9分别表示1年内业务可能中断的时间是36.5天、3.65天，这种级别的可靠性或许还达不到高可靠性；而6个9则表示1年内业务中断时间最多是31秒，这个级别的可靠性并非实现不了，而是要做到从5个9到6个9的可靠性提升要付出成本太高。
   可靠性 级别 年停机时间（分钟）     99.9% 3个9 500   99.99% 4个9 50   99.999% 5个9 5   99.9999% 6个9 0.5    补充：
  【MTBF】即平均故障间隔时间，英文全称是：Mean Time Between Failure。是衡量一个产品的可靠性指标，单位为：小时。具体来说，是指相邻两次故障之间的平均工作时间，也称为平均故障间隔。概括的说，产品故障少的就是可靠性高，产品的故障总数与寿命单位总数之比叫：故障率（Failure rate）。
  【失效率】是指工作到某一时刻尚未失效的产品，在该时刻后单位时间内发生失效的概率。一般记为：λ，它也是时间t的函数，故也记为：λ(t)，称为失效率函数，有时也称为故障率函数或风险函数。 失效率 λ=1/MTBF，单位1FITs=10-9(1/h)
  【MTTR】即平均修复时间，英文全称是：Mean Time To Repair。是指可修复产品的平均修复时间，就是从出现故障到修复中间的这段时间。MTTR越短表示易恢复性越好。
  【修复率】表示为：μ，英文全称是：Repair Rate，产品维修性的一种基本参数。修理时间已达到某个时刻但尚未修复的产品，在该时刻后的单位时间内完成修复的概率。
  ￼</description>
    </item>
    
    <item>
      <title>如何利用Github Pages和Hugo搭建个人博客？</title>
      <link>https://yangziran.com/posts/1584969199/</link>
      <pubDate>Mon, 23 Mar 2020 21:13:19 +0800</pubDate>
      
      <guid>https://yangziran.com/posts/1584969199/</guid>
      <description>Github Pages 和 Hugo 是什么？ Github Pages 是一个静态站点托管服务，直接将个人、组织或项目的页面托管于Github仓库中。 Hugo 是一个用Go语言编写的静态站点生成器，它针对速度、易用性和可配置性进行了优化，快速灵活。
还有其他选择吗？ Jekyll、Hexo、Middleman等，这里不做过多说明。
接下来，看看如何一步一步地位自己搭建一个博客！  注：以下步骤以在MacOS上的操作为例，其他操作系统类似，只是一些工具和命令有区别。  第0步：安装Git、Go并学习  1、如果你的电脑里未安装Git，到 这里 下载安装，并学习相关操作，后续博客的发布都需要用到。 2、到 这里 下载安装Go，只需要安装就可以。  第1步：新建一个Github库  1、注册一个Github账号。如果你已有账号，直接登录，如果你没有账号，注册并登录。 2、打开Github Pages官网，浏览并了解User or organization site补发对应的操作步骤。 Github Pages：https://pages.github.com 3、新建一个Github repository，库名为username.github.io，username即你的Github账号username。新建repository：https://github.com/new，作为博客内容发布仓库，权限需要为 public。 4、创建另外一个Github repository，库名随便取，这里就以blog命名，作为博客源码管理仓库，权限可以为private。   注：一个账号只能有一个username.github.io仓库，我这里已经创建了就不能再创建。  第2步：安装Hugo  1、浏览Hugo官方的安装指南进行初步了解，安装与你的操作系统对应的必要工具。  Hugo安装指南：
 英文 https://gohugo.io/getting-started/installing  中文 https://www.gohugo.org/doc/overview/installing   2、源码安装Hugo实例，源码方法适合所有平台
在安装 Hugo 之前，先配置好 Go 的环境变量以及代理：
// 配置环境变量 export GOPATH=$HOME/go // 需要根据自己操作系统配置 // 配置代理 go env -w GO111MODULE=on go env -w GOPROXY=https://goproxy.</description>
    </item>
    
    <item>
      <title>CentOS 7.7.1908 安装 MySQL 5.7.28-*.rpm-bundle.tar</title>
      <link>https://yangziran.com/posts/1584208079/</link>
      <pubDate>Sun, 15 Mar 2020 01:47:59 +0800</pubDate>
      
      <guid>https://yangziran.com/posts/1584208079/</guid>
      <description>1、卸载系统自带的mariadb-lib # rpm -qa|grep mariadb // mariadb-libs-5.5.64-1.el7.x86_64 # rpm -e mariadb-libs-5.5.64-1.el7.x86_64 —nodeps  2、下载mysql 5.7.28-*.rpm-bundle.tar包并解压 # tar -xvf mysql-5.7.28-1.el7.x86_64.rpm-bundle.tar  3、安装 依次执行（几个包有依赖关系，需要按顺序）下面命令安装 # rpm -ivh mysql-community-common-5.7.28-1.el7.x86_64.rpm # rpm -ivh mysql-community-libs-5.7.28-1.el7.x86_64.rpm # rpm -ivh mysql-community-client-5.7.28-1.el7.x86_64.rpm # rpm -ivh mysql-community-server-5.7.28-1.el7.x86_64.rpm  4、运行并添加开机启动 # systemctl enable mysqld // 添加开机启动 # systemctl start mysqld // 启动MySQL服务  5、登录并修改密码 在上一步启动MySQL服务的时候，会初始化MySQL并为root用户生成默认密码并将该密码标记为过期，登录后需要设置一个新的密码。 # cat /var/log/mysqld.log // 查看MySQL日志，搜索到：A temporary password is generated for root@localhost 后面就是生成的默认密码 # mysql -uroot -p // 用root用户登录MySQL mysql&amp;gt; alter user ‘root’@‘localhost’ identified by ‘新密码’; // 密码要求：长度最少8位，大小写和特殊字符组成 mysql&amp;gt; create user ‘新用户’ identified by ‘新密码’; // 创建远程登录用户 mysql&amp;gt; grant all on *.</description>
    </item>
    
  </channel>
</rss>