<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nature</title>
    <link>https://yangziran.com/</link>
    <description>Recent content on Nature</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 06 Jun 2020 23:03:33 +0800</lastBuildDate>
    
        <atom:link href="https://yangziran.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Java8 启动脚本</title>
        <link>https://yangziran.com/posts/1591455813/</link>
        <pubDate>Sat, 06 Jun 2020 23:03:33 +0800</pubDate>
        
        <guid>https://yangziran.com/posts/1591455813/</guid>
        <description>Nature https://yangziran.com/posts/1591455813/ -&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#--------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Java程序启动脚本，启动Jar或者基于SpringBoot的War包&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 基于Java8 HotSpot，Linux|MacOS系统&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 使用方式：sh xxx.sh [ start|stop|restart|status ]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 配置APP_NAME、WORK_DIR、GC_LOGS之后运行脚本即可&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Author Yang ZiRan&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Email	mail@yangziran.com&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Site https://yangziran.com&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#--------------------------------------------&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Jar|War文件名称&lt;/span&gt;
APP_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Jar|War工作路径&lt;/span&gt;
WORK_DIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# JVM日志路径&lt;/span&gt;
GC_LOGS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/logs&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 进程停止等待时间，秒&lt;/span&gt;
SHUTDOWN_WAIT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 启用核心转储，并限制文件大小为1024K，如需不限制文件大小，则使用：ulimit -c unlimited&lt;/span&gt;
ulimit -c &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 模式选项&lt;/span&gt;
MODE_OPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-server&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 内存选项&lt;/span&gt;
MEM_OPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-Xmx4G -Xms4G -XX:MetaspaceSize=512M -XX:MaxMetaspaceSize=512M&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 启动时预申请内存&lt;/span&gt;
MEM_OPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$MEM_OPTS&lt;span style=&#34;color:#e6db74&#34;&gt; -XX:+AlwaysPreTouch&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# GC选项&lt;/span&gt;
GC_OPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:+ParallelRefProcEnabled&amp;#34;&lt;/span&gt;
GCLOG_OPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-Xloggc:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;GC_LOGS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintCommandLineFlags&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# OOM选项&lt;/span&gt;
OOM_OPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-XX:HeapDumpPath=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;GC_LOGS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; -verbose:class -XX:+HeapDumpOnOutOfMemoryError&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# CRASH选项&lt;/span&gt;
CRASH_OPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-XX:ErrorFile=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;GC_LOGS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/hs_err_pid%p.log&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# JMX选项&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#JMX_OPTS=&amp;#34;-Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 其他选项&lt;/span&gt;
OTHER_OPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-Djava.net.preferIPv4Stack=true -Dfile.encoding=UTF-8&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# JVM启动参数&lt;/span&gt;
JAVA_OPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$MODE_OPTS&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;$MEM_OPTS&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;$GC_OPTS&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;$GCLOG_OPTS&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;$OOM_OPTS&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;$CRASH_OPTS&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;$OTHER_OPTS&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#75715e&#34;&gt;# 使用说明，用来提示输入参数&lt;/span&gt;
usage&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: sh xxx.sh [ start|stop|restart|status ]&amp;#34;&lt;/span&gt;
	exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 检查程序是否在运行&lt;/span&gt;
checkpid&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	pid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;ps -ef|grep $APP_NAME|grep -v grep|awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
	&lt;span style=&#34;color:#75715e&#34;&gt;# 如果不存在返回：1，存在返回：0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -z &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;pid&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 启动方法&lt;/span&gt;
start&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	checkpid
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $? -eq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
		echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;APP_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is already running. Pid is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;pid&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		nohup java $JAVA_OPTS -jar $WORK_DIR/APP_NAME &amp;gt; /dev/null 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;amp;
		echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;APP_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; started. Pid is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;pid&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt; 
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 停止方法&lt;/span&gt;
stop&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	checkpid
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $? -eq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
		kill $pid

		local count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;until&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;ps -p $pid|grep -c $pid&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $count -gt $SHUTDOWN_WAIT &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
			echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;waiting for processes to exit&amp;#34;&lt;/span&gt;
			sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
			let count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$count+1
		&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;

		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $count -gt $SHUTDOWN_WAIT &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
			echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;killing processes didn&amp;#39;t stop after &lt;/span&gt;$SHUTDOWN_WAIT&lt;span style=&#34;color:#e6db74&#34;&gt; seconds&amp;#34;&lt;/span&gt;
			kill -9 $pid
		&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

		echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;APP_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; stopped&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;APP_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is not running&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 重启方法&lt;/span&gt;
restart&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	stop
	start
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 运行状态&lt;/span&gt;
status&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	checkpid
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $? -eq &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
		echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;APP_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is running. Pid is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;pid&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
		echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;APP_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is not running&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 根据输入参数，选择执行对应方法，默认执行使用说明&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; in
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
		start
	;;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stop&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
		stop
	;;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;restart&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
		restart
	;;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
		status
	;;
	*&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
		usage
	;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;esac&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://yangziran.com/posts/1591455813/ - </description>
        </item>
    
    
    
        <item>
        <title>Sharding-JDBC预研报告</title>
        <link>https://yangziran.com/posts/1590998525/</link>
        <pubDate>Mon, 01 Jun 2020 16:02:06 +0800</pubDate>
        
        <guid>https://yangziran.com/posts/1590998525/</guid>
        <description>Nature https://yangziran.com/posts/1590998525/ -&lt;p&gt;背景
面对日益增加的系统访问量，数据库的吞吐量面临着巨大瓶颈。 传统的将数据集中存储至单一数据节点的解决方案，在性能、可用性和运维成本这三方面已经难于满足互联网的海量数据场景。
通过分库和分表进行数据的拆分来使得各个表的数据量保持在阈值以下，以及对流量进行疏导应对高访问量，是应对高并发和海量数据系统的有效手段。
读写分离的数据节点中的数据内容是一致的，而水平分片的每个数据节点的数据内容却并不相同。将水平分片和读写分离联合使用，能够更加有效的提升系统性能。
Sharding-JDBC简介
ShardingSphere是一套开源的分布式数据库中间件解决方案组成的生态圈，它由Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar（计划中）这3款相互独立的产品组成。 他们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如Java同构、异构语言、云原生等各种多样化的应用场景。
Sharding-JDBC采用无中心化架构，定位为轻量级Java框架，在Java的JDBC层提供的额外服务。它使用客户端直连数据库，以Jar包的形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适用于任何基于JDBC的ORM框架，如：JPA、Hibernate、MyBatis、Spring JDBC Template或直接使用JDBC。&lt;/li&gt;
&lt;li&gt;支持任何第三方的数据库连接池，如：DBCP、C3P0、BoneCP、Druid、HikariCP等。&lt;/li&gt;
&lt;li&gt;支持任意实现JDBC规范的数据库。目前支持MySQL、Oracle、SQLServer、PostgreSQL以及任何遵循SQL92标准的数据库。
技术架构
整体架构：
采用客户端直连数据库的方式，以Jar包形式提供服务，无需额外部署和依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读写分离：
是根据SQL语义的分析，将读操作和写操作分别路由至主库与从库。在主从模式中，同一个事物中的读写均用主库。
数据分片：
流程核心由 SQL解析 -&amp;gt; 执行器优化 -&amp;gt; SQL路由 -&amp;gt; SQL改写 -&amp;gt; SQL执行 -&amp;gt; 结果归并 组成。&lt;/p&gt;
&lt;p&gt;SQL解析：
分为词法解析和语法解析。先通过词法解析器将SQL拆分为一个个不可再分的单词，再使用语法解析器对SQL进行理解，并最终提炼出解析上下文。解析上下文包括表、选择项、排序项、分组项、聚合函数、分页信息、查询条件以及可能需要修改的占位符标记。&lt;/p&gt;
&lt;p&gt;执行器优化：
合并和优化分片条件，如OR等。&lt;/p&gt;
&lt;p&gt;SQL路由：
根据解析上下文匹配用户配置的分片策略，并生成路由路径。&lt;/p&gt;
&lt;p&gt;SQL改写：
将SQL改写为在真实数据库中可以正确执行的语句。SQL改写分为正确性改写和优化改写。&lt;/p&gt;
&lt;p&gt;SQL执行：
通过多线程执行器异步执行。&lt;/p&gt;
&lt;p&gt;结果归并：
将多个执行结果集归并，以便于通过统一的JDBC接口输出。结果归并包括流式归并、内存归并和使用装饰者模式的追加归并这几种方式。&lt;/p&gt;
&lt;p&gt;技术对比
经过了解，目前主流的一些数据库中间件存在两类思想：中间层代理（Proxy）、增强版JDBC驱动（Client）。市面上这两类比较有代表性的组件分别为Mycat和Sharding-JDBC，以下就对比这两组件：
Mycat	Sharing-JDBC
模式	Proxy	Client
异构语言	任意	仅Java
性能	损耗略高	损耗低
优点	多语言支持、对业务开发透明	实现简单、天然去中心化、无需额外部署、无其他依赖
缺点	实现复杂、本身需要高可用、存在中心化	需要业务自行升级、支持的开发语言单一
存在的限制	部分SQL还不能很好的支持：Join，Insert into，跨分片的事务，分片的表不能Lock Table，在order、g’roup、sum、count条件下会出兼容问题
Hibernate无法完全支持
事务处理需要手动控制才能提示性能	DataSource接口不支持timeout相关操作
Connection接口不支持存储过程、函数、游标等操作
Statement和PreparedStatement接口不支持返回多结果集的语句和国际化字符的操作
ResultSet接口不支持对结果集指针位置判断、不支持通过非next方法改变结果指针位置、不支持修改结果集
不支持JDBC4.1接口新功能
业界应用	https://github.com/MyCATApache/Mycat-Server/issues/112
只有联通、电信等少量公司登记	https://shardingsphere.apache.org/community/cn/powered-by/
有：民生银行、翼支付、快捷通支付、当当、京东、携程 等一百多家公司使用
技术发展
Mycat
由社区爱好者在阿里Cobar基础上进行二次开发，根据官网消息一直在准备2.0版本，现有版本基本停止维护，存量BUG有713个未修复。
Mycat已经发布了两个版本， 1.x版本主要实现了分库分表读写分离等特性，2.x规划将实现分布式事务、服务分布式及运维监控上的一些增强。&lt;/p&gt;
&lt;p&gt;Sharding-JDBC
由当当开发，现已捐赠给Apache进行孵化，社区维护活跃。
Sharding-JDBC已经发布了四个版本，1.x版本主要关注SQL兼容、分库分表、读写分离等功能；2.x版本沿用了1.x的体系，增加了分布式治理的能力：支持配置中心、可动态修改配置，支持客户端熔断和失效转移，以及调用链路追踪分析；3.x版本主要是关注生态圈的发展，改名为ShardingSphere，包含Sharding-JDBC、SHarding-Proxy、Sharding-Sidecar；4.x版本为Apache发布的第一个版本，暂无新功能规划。&lt;/p&gt;
&lt;p&gt;总结
通过对Mycat和ShardingSphere的对比，最终考虑选择ShardingSphere的Sharding-JDBC组件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mycat基于已被阿里放弃的Cobar进行开发，目前产品发展停滞不前，没有明确的后期发展线路，文档比较粗糙BUG修复不积极。Sharding-JDBC已进入Apache进行孵化，对于后期的发展有一定的保障。&lt;/li&gt;
&lt;li&gt;mycat暂未解决事务一致性的问题；还有字典表：字典表维护在其中一个库影响效率、维护在多个库又存在事务一致性的问题；分页查询性能低下：比如查询100到110之间的数据，会到每个库查询0~100的数据。合并这些被取出的数据再从中去除100~110的数据，分页数据量越大性能越低
mycat为中心化proxy模式，需要依赖运维对mycat的集群维护和操作；Sharding-JDBC为无中心化client模式，无需外部依赖。&lt;/li&gt;
&lt;/ol&gt;
- https://yangziran.com/posts/1590998525/ - </description>
        </item>
    
    
    
        <item>
        <title>MySQL 5.7.28 主从复制-gtid</title>
        <link>https://yangziran.com/posts/1585664661/</link>
        <pubDate>Tue, 31 Mar 2020 22:24:21 +0800</pubDate>
        
        <guid>https://yangziran.com/posts/1585664661/</guid>
        <description>Nature https://yangziran.com/posts/1585664661/ -&lt;p&gt;MySQL 5.6开始引入了GTID的概念，那么GTID是何方神圣？其实就是一个全局事务标识符。使用GTID时，每次事务提交都会在binlog里生成一个唯一的标识符，它由UUID和事务ID组成。首次提交的事务ID为1，第二次为2，第三次为3，以此类推。UUID是服务器的身份ID，在第一次启动MySQL时，会自动生成一个server_uuid，并且默认写入到数据库下的auto.cnf文件里。无需修改，也不建议修改。&lt;/p&gt;
&lt;p&gt;基于GTID的主从复杂好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、在传统的复制里面，当发生故障需要主从切换，需要找到binlog和pos点，然后change master to 指向新的master，相对来说比较麻烦，也容易出错。在MySQL 5.6里面，不用再找binlog和pos点，只需要知道master的ip、port以及账号密码就行，因为复制是自动的，MySQL会通过内部机制GTID自动找点同步。&lt;/li&gt;
&lt;li&gt;2、多线程复制（基于库）。在MySQL 5.6以前的版本，slave的复制是单线程的，而master是并发写入的，所以延时是避免不了的。唯一有效的方法是吧多个库放在多台slave，这样又浪费服务器。在MySQL 5.6里面，我们可以把多个表放在多个库，这样就可以使用多线程复制，当只有1个库，多线程复制是没有用的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GTID相关特性默认是关闭的，使用：show variables like ‘%gtid%’; 查看。GTID不支持MyISAM表（GTID是基于食物的），对CREATE TABLE ….. SELECT 语句不支持。&lt;/p&gt;
&lt;p&gt;基于GTID的主从复制配置如下（master和slave一样，不需要server-id，其他步骤与传统复制一致）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gtid-mode=ON&lt;/li&gt;
&lt;li&gt;enforce-grid-consistency=ON&lt;/li&gt;
&lt;li&gt;log-bin=mysql-bin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多线程复制由参数 slave-paralles-workers 控制，设定从服务器的SQL线程数，0表示关闭多线程复制，默认为0，最大考验设置为1024个线程。在从库的配置文件[mysqld]段落添加。&lt;/p&gt;
&lt;p&gt;参考官方文档：
&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/replication-gtids-howto.html&#34;&gt;https://dev.mysql.com/doc/refman/5.7/en/replication-gtids-howto.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mariadb.com/kb/en/setting-up-replication/&#34;&gt;https://mariadb.com/kb/en/setting-up-replication/&lt;/a&gt;&lt;/p&gt;
- https://yangziran.com/posts/1585664661/ - </description>
        </item>
    
    
    
        <item>
        <title>MySQL 5.7.28 主从复制-binlog</title>
        <link>https://yangziran.com/posts/1585664478/</link>
        <pubDate>Tue, 31 Mar 2020 22:21:18 +0800</pubDate>
        
        <guid>https://yangziran.com/posts/1585664478/</guid>
        <description>Nature https://yangziran.com/posts/1585664478/ -&lt;h3 id=&#34;1创建同步用户&#34;&gt;1、创建同步用户&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; grant replication slave on *.* to ‘用户名’@‘主机’ identified by ‘密码’;
说明：主机用%表示所有网段都可以访问，用192.168.1.%表示192.168.1.1~255间的主机都可以访问，用具体IP则只能是指定主机访问。
mysql&amp;gt; flush privileges;
说明：刷新权限数据，将权限信息从内存中写入数据库。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2配置数据库&#34;&gt;2、配置数据库&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;在my.cnf文件中的[mysqld]下面添加：
    log-bin=mysql-bin
    server-id=1
说明：在修改my.cnf之前先停止mysqld服务。bin-log需要两台机值一致，server-id不能一样。两台数据库配置完并重启才能进行下一步。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3设置主从同步&#34;&gt;3、设置主从同步&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; change master to master_host=‘Master地址’, master_port=Master端口, master_user=‘同步账号用户名’, master_password=‘同步账号密码’, master_log_file=&#39;mysql-bin.000001&#39;, master_log_pos=600;
说明：master_log_file和master_log_pos通过在主库执行 show master status; 命令取得，对应字段是 File 和 Position 。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4开始同步&#34;&gt;4、开始同步&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;在从库执行 start slave; 启动slave线程开始同步。在从库利用 show slave status; 命令查看同步状态，如果看到 Slave_lo_State 字段有：Waiting for master to send event … 则表示同步成功。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;其他参数&#34;&gt;其他参数：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;replicate-wild-do-db、replicate-wild-do-table、replicate-wild-ignore-db、replicate-wild-ignore-table 解决主从架构MySQL跨库更新问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;log-slave-updates=1 从库更新也写binlog，主要用于链式复制，从库作为另一个库的主库，或者HA架构中从库可升级为主库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;skip-slave-start=1 阻止从库崩溃后，自动启动复制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;read-only=1 设置从库为只读，从库只接收来自主库的同步数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;在开启同步之前的库表不会被同步如需同步则配置-replicate-wild-do-dbreplicate-wild-do-table-指定&#34;&gt;在开启同步之前的库表不会被同步，如需同步则配置 replicate-wild-do-db、replicate-wild-do-table 指定&lt;/h4&gt;
&lt;h3 id=&#34;参考官方文档&#34;&gt;参考官方文档：&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/replication-howto-masterbaseconfig.html&#34;&gt;https://dev.mysql.com/doc/refman/5.7/en/replication-howto-masterbaseconfig.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mariadb.com/kb/en/setting-up-replication/&#34;&gt;https://mariadb.com/kb/en/setting-up-replication/&lt;/a&gt;&lt;/p&gt;
- https://yangziran.com/posts/1585664478/ - </description>
        </item>
    
    
    
        <item>
        <title>运维常说的 5个9、4个9、3个9 的可靠性，到底是什么？</title>
        <link>https://yangziran.com/posts/1585456431/</link>
        <pubDate>Sun, 29 Mar 2020 12:33:59 +0800</pubDate>
        
        <guid>https://yangziran.com/posts/1585456431/</guid>
        <description>Nature https://yangziran.com/posts/1585456431/ -&lt;p&gt;在系统的高可用性（也称为可用性，英文描述为HA，High Available）里有个衡量其可靠性的标准—X个9，这个X是代表数字 3~5。X个9表示在系统1年时间的使用过程中，系统可以正常使用时间与总时间（1年）之比，我们通过下面的计算来感受X个9在不同级别的可靠性差异。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3个9：(1-99.9%)*365*24=8.76小时，表示该系统在连续运行1年时间里最多可能的业务中断时间是8.76小时。&lt;/li&gt;
&lt;li&gt;4个9：(1-99.99%)*365*24=0.876小时=52.6分钟，表示该系统在连续运行1时间里最多可能的业务中断时间是52.6分钟。&lt;/li&gt;
&lt;li&gt;5个9：(1-99.999%)*365*24*60=5.26分钟，表示该系统在连续运行1年时间里最多可能的业务中断时间是5.26分钟。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么X个9里面的X只代表数字3~5，为什么没有1~2，也没有大于5的呢？接着往下计算：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1个9：(1-90%)*365=36.5天&lt;/li&gt;
&lt;li&gt;2个9：(1-99%)*365=3.65天&lt;/li&gt;
&lt;li&gt;6个9：(1-99.9999%)*365*24*60*60=31秒&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到1个9和2个9分别表示1年内业务可能中断的时间是36.5天、3.65天，这种级别的可靠性或许还达不到高可靠性；而6个9则表示1年内业务中断时间最多是31秒，这个级别的可靠性并非实现不了，而是要做到从5个9到6个9的可靠性提升要付出成本太高。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;可靠性&lt;/th&gt;
&lt;th&gt;级别&lt;/th&gt;
&lt;th&gt;年停机时间（分钟）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;99.9%&lt;/td&gt;
&lt;td&gt;3个9&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99.99%&lt;/td&gt;
&lt;td&gt;4个9&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99.999%&lt;/td&gt;
&lt;td&gt;5个9&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99.9999%&lt;/td&gt;
&lt;td&gt;6个9&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;【MTBF】即平均故障间隔时间，英文全称是：Mean Time Between Failure。是衡量一个产品的可靠性指标，单位为：小时。具体来说，是指相邻两次故障之间的平均工作时间，也称为平均故障间隔。概括的说，产品故障少的就是可靠性高，产品的故障总数与寿命单位总数之比叫：故障率（Failure rate）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【失效率】是指工作到某一时刻尚未失效的产品，在该时刻后单位时间内发生失效的概率。一般记为：λ，它也是时间t的函数，故也记为：λ(t)，称为失效率函数，有时也称为故障率函数或风险函数。
失效率 λ=1/MTBF，单位1FITs=10-9(1/h)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【MTTR】即平均修复时间，英文全称是：Mean Time To Repair。是指可修复产品的平均修复时间，就是从出现故障到修复中间的这段时间。MTTR越短表示易恢复性越好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【修复率】表示为：μ，英文全称是：Repair Rate，产品维修性的一种基本参数。修理时间已达到某个时刻但尚未修复的产品，在该时刻后的单位时间内完成修复的概率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;￼&lt;img src=&#34;../../images/1585456431/1337307870.jpg&#34; alt=&#34;avatar&#34;&gt;&lt;/p&gt;
- https://yangziran.com/posts/1585456431/ - </description>
        </item>
    
    
    
        <item>
        <title>如何利用Github Pages和Hugo搭建个人博客？</title>
        <link>https://yangziran.com/posts/1584969199/</link>
        <pubDate>Mon, 23 Mar 2020 21:13:19 +0800</pubDate>
        
        <guid>https://yangziran.com/posts/1584969199/</guid>
        <description>Nature https://yangziran.com/posts/1584969199/ -&lt;h3 id=&#34;github-pages-和-hugo-是什么&#34;&gt;Github Pages 和 Hugo 是什么？&lt;/h3&gt;
&lt;p&gt;Github Pages 是一个静态站点托管服务，直接将个人、组织或项目的页面托管于Github仓库中。
Hugo 是一个用Go语言编写的静态站点生成器，它针对速度、易用性和可配置性进行了优化，快速灵活。&lt;/p&gt;
&lt;h3 id=&#34;还有其他选择吗&#34;&gt;还有其他选择吗？&lt;/h3&gt;
&lt;p&gt;Jekyll、Hexo、Middleman等，这里不做过多说明。&lt;/p&gt;
&lt;h3 id=&#34;接下来看看如何一步一步地位自己搭建一个博客&#34;&gt;接下来，看看如何一步一步地位自己搭建一个博客！&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;注：以下步骤以在MacOS上的操作为例，其他操作系统类似，只是一些工具和命令有区别。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第0步安装gitgo并学习&#34;&gt;第0步：安装Git、Go并学习&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、如果你的电脑里未安装Git，到 &lt;a href=&#34;https://git-scm.com&#34;&gt;这里&lt;/a&gt; 下载安装，并学习相关操作，后续博客的发布都需要用到。&lt;/li&gt;
&lt;li&gt;2、到 &lt;a href=&#34;https://golang.org/dl&#34;&gt;这里&lt;/a&gt; 下载安装Go，只需要安装就可以。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第1步新建一个github库&#34;&gt;第1步：新建一个Github库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、注册一个Github账号。如果你已有账号，直接登录，如果你没有账号，注册并登录。&lt;/li&gt;
&lt;li&gt;2、打开Github Pages官网，浏览并了解User or organization site补发对应的操作步骤。
Github Pages：&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://pages.github.com&#34;&gt;https://pages.github.com&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;3、新建一个Github repository，库名为username.github.io，username即你的Github账号username。新建repository：&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://github.com/new&#34;&gt;https://github.com/new&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;，作为博客内容发布仓库，权限需要为 public。&lt;/li&gt;
&lt;li&gt;4、创建另外一个Github repository，库名随便取，这里就以blog命名，作为博客源码管理仓库，权限可以为private。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../../images/1584969199/WX20200325-163613@2x.png&#34; alt=&#34;avatar&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注：一个账号只能有一个username.github.io仓库，我这里已经创建了就不能再创建。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第2步安装hugo&#34;&gt;第2步：安装Hugo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、浏览Hugo官方的安装指南进行初步了解，安装与你的操作系统对应的必要工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hugo安装指南：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;英文 &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://gohugo.io/getting-started/installing&#34;&gt;https://gohugo.io/getting-started/installing&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;中文 &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://www.gohugo.org/doc/overview/installing&#34;&gt;https://www.gohugo.org/doc/overview/installing&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2、源码安装Hugo实例，源码方法适合所有平台&lt;/p&gt;
&lt;p&gt;在安装 Hugo 之前，先配置好 Go 的环境变量以及代理：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 配置环境变量
export GOPATH=$HOME/go // 需要根据自己操作系统配置

// 配置代理
go env -w GO111MODULE=on
go env -w GOPROXY=https://goproxy.cn,direct // 参考：https://goproxy.cn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装Hugo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go get -v github.com/gohugoio/hugo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;go get 将会获取 Hugo 以及所有依赖到你的 $GOPATH/src 目录，同时编译所有代码生成最终的 hugo （或 hugo.exe）二进制文件，这就全部准备好了&lt;/p&gt;
&lt;p&gt;你可以使用 -u 参数执行 go get 来更新 Hugo 的所有依赖&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go get -u -v github.com/gohugoio/hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第3步新建一个hugo网站&#34;&gt;第3步：新建一个Hugo网站&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、进入你想存放 Hugo 网站的目录。&lt;/li&gt;
&lt;li&gt;2、执行以下命令新建一个 Hugo 网站。
&lt;pre&gt;&lt;code&gt;hugo new site yangziran.github.io // &#39;yangziran.github.io&#39; 是我网站文件夹名。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时，会生成一个 yangziran.github.io 文件夹，&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第4步选择并克隆主题&#34;&gt;第4步：选择并克隆主题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;默认的 Hugo 是不带任何主题的，你可以在官网上 &lt;a href=&#34;https://themes.gohugo.io&#34;&gt;下载&lt;/a&gt; 很多免费开源的主题，基本上所有的主题都会自带安装方法，并且每个主题的 config 配置文件基本是不一样的
&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/AmazingRise/hugo-theme-diary.git themes/diary
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;然后修改 config.toml 或 config.yaml 增加一行
&lt;pre&gt;&lt;code&gt;theme = &amp;quot;diary&amp;quot; // diary 是我选择的主题文件夹的名称
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;然后使用 hugo server &amp;ndash;buildDrafts -w 即可访问 &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; 查看本地安装好的Hugo&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第5步编辑配置文件&#34;&gt;第5步：编辑配置文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;baseURL 即为你博客的域名，如果有自己的域名并且打算使用其访问，就在这里填上准备好的域名并且到 Github 上的仓库 Settings 的 Custom domain 填上 baseURL 中的内容并保存，建议勾选上 Enforce HTTPS；如果没有自己的域名，那就填上 youname.github.io（仓库名称）&lt;/li&gt;
&lt;li&gt;title 即为你博客的标题&lt;/li&gt;
&lt;li&gt;其他配置请自行参考你所选择的主题配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第6步新建一篇文章&#34;&gt;第6步：新建一篇文章&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发布文章或页面的命令为
&lt;pre&gt;&lt;code&gt;hugo new posts/new-post.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;new-post 为文章或页面的名字，也可以采用时间戳命名: hugo new posts/$(date +%s).md&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;然后编辑 content/posts 目录下的 .md 文件，使用 Markdown 语法写文章&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第7步本地预览网站效果&#34;&gt;第7步：本地预览网站效果&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本地预览网站的命令为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server --buildDrafts -w
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;ndash;buildDrafts ：生成被标记为【草稿】的文档&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;-w ：监控更改，如果发生更改直接显示到博客上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第8步构建hugo网站&#34;&gt;第8步：构建Hugo网站&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在生成你的静态网页前，先将文章的 draft 改为 false&lt;/li&gt;
&lt;li&gt;然后在 youname.github.io 目录下执行 hugo&lt;/li&gt;
&lt;li&gt;此时所有生成的 HTML 文件都放在 youname.github.io/public 目录下&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第9步将网站目录转换为git库&#34;&gt;第9步：将网站目录转换为Git库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在这里会初始化 youname.github.io 和 public 两个 Git 仓库，并将 public 仓库添加为 youname.github.io 子模块
&lt;pre&gt;&lt;code&gt;git init
cd public
git init
git add .
git commit -am &amp;quot;first commit&amp;quot;
  
cd ..
git submodule add https://github.com/youname/youname.github.io.git
git add .
git commit -am &amp;quot;first commit&amp;quot;
  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第10步关联远程库并推送代码&#34;&gt;第10步：关联远程库并推送代码&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;```
git remote add origin https://github.com/youname/blog.git

cd public
git remote add origin https://github.com/youname/youname.github.io.git
git push -u origin master

cd ..
git push -u origin master
```
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;之后如何添加一篇博客&#34;&gt;之后如何添加一篇博客&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;1、新建一篇文章，编辑内容
2、本地预览网站呈现效果
3、构建Hugo网站
4、提交修改至Git仓库并推送到Github
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;参考&#34;&gt;参考：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Git：&lt;a href=&#34;https://git-scm.com/book/zh/v2&#34;&gt;https://git-scm.com/book/zh/v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github Pages：&lt;a href=&#34;https://help.github.com/cn/github/working-with-github-pages&#34;&gt;https://help.github.com/cn/github/working-with-github-pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hugo：&lt;a href=&#34;https://gohugo.io/documentation/&#34;&gt;https://gohugo.io/documentation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://yangziran.com/posts/1584969199/ - </description>
        </item>
    
    
    
        <item>
        <title>CentOS 7.7.1908 安装 MySQL 5.7.28-*.rpm-bundle.tar</title>
        <link>https://yangziran.com/posts/1584208079/</link>
        <pubDate>Sun, 15 Mar 2020 01:47:59 +0800</pubDate>
        
        <guid>https://yangziran.com/posts/1584208079/</guid>
        <description>Nature https://yangziran.com/posts/1584208079/ -&lt;h3 id=&#34;1卸载系统自带的mariadb-lib&#34;&gt;1、卸载系统自带的mariadb-lib&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# rpm -qa|grep mariadb
// mariadb-libs-5.5.64-1.el7.x86_64
# rpm -e mariadb-libs-5.5.64-1.el7.x86_64 —nodeps
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2下载mysql-5728-rpm-bundletar包并解压&#34;&gt;2、下载mysql 5.7.28-*.rpm-bundle.tar包并解压&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# tar -xvf mysql-5.7.28-1.el7.x86_64.rpm-bundle.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3安装&#34;&gt;3、安装&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;依次执行（几个包有依赖关系，需要按顺序）下面命令安装
# rpm -ivh mysql-community-common-5.7.28-1.el7.x86_64.rpm
# rpm -ivh mysql-community-libs-5.7.28-1.el7.x86_64.rpm
# rpm -ivh mysql-community-client-5.7.28-1.el7.x86_64.rpm
# rpm -ivh mysql-community-server-5.7.28-1.el7.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4运行并添加开机启动&#34;&gt;4、运行并添加开机启动&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# systemctl enable mysqld // 添加开机启动
# systemctl start mysqld // 启动MySQL服务
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5登录并修改密码&#34;&gt;5、登录并修改密码&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;在上一步启动MySQL服务的时候，会初始化MySQL并为root用户生成默认密码并将该密码标记为过期，登录后需要设置一个新的密码。
# cat /var/log/mysqld.log // 查看MySQL日志，搜索到：A temporary password is generated for root@localhost 后面就是生成的默认密码
# mysql -uroot -p // 用root用户登录MySQL
mysql&amp;gt; alter user ‘root’@‘localhost’ identified by ‘新密码’; // 密码要求：长度最少8位，大小写和特殊字符组成
mysql&amp;gt; create user ‘新用户’ identified by ‘新密码’; // 创建远程登录用户
mysql&amp;gt; grant all on *.* to 新用户; // 赋予新用户所有数据库的所有权限
mysql&amp;gt; flush privileges; // 刷新系统权限表
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6防火墙配置远程访问&#34;&gt;6、防火墙配置远程访问&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# firewall-cmd —permanent —zone=public —add-service=mysql // 永久开放mysql服务
# firewall-cmd —reload // 重新加载防火墙
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：新版的mysql数据库下的user表中已经没有password字段了，而是将加密后的用户密码存储于authentication_string字段。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;关闭密码强度审计&#34;&gt;关闭密码强度审计：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;方法一：
    mysql&amp;gt; set global validate_password_policy=0 // 密码复杂度
    mysql&amp;gt; set global validate_password_length=1 // 密码长度
方法二：
    在my.cnf的[mysqld]标签处末行添加以下项：
        validate-password=off
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;错误及解决方法&#34;&gt;错误及解决方法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;error：Failed dependencies:
    /usr/bin/perl is needed by mysql-community-server-5.7.28-1.el7.x86_64
    net-tools is needed by mysql-community-server-5.7.28-1.el7.x86_64
    perl(Getopt::Long) is needed by mysql-community-server-5.7.28-1.el7.x86_64
    perl(strict) is needed by mysql-community-server-5.7.28-1.el7.x86_64

解决方法：
    # yum install perl
    # yum install net-tools&lt;/code&gt;&lt;/pre&gt;
- https://yangziran.com/posts/1584208079/ - </description>
        </item>
    
    
  </channel>
</rss> 