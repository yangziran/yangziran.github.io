<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nature</title>
    <link>https://yangziran.com/</link>
    <description>Recent content on Nature</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 29 Mar 2020 12:33:59 +0800</lastBuildDate>
    
        <atom:link href="https://yangziran.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>运维常说的 5个9、4个9、3个9 的可靠性，到底是什么？</title>
        <link>https://yangziran.com/posts/1585456431/</link>
        <pubDate>Sun, 29 Mar 2020 12:33:59 +0800</pubDate>
        
        <guid>https://yangziran.com/posts/1585456431/</guid>
        <description>Nature https://yangziran.com/posts/1585456431/ -&lt;p&gt;在系统的高可用性（也称为可用性，英文描述为HA，High Available）里有个衡量其可靠性的标准—X个9，这个X是代表数字 3~5。X个9表示在系统1年时间的使用过程中，系统可以正常使用时间与总时间（1年）之比，我们通过下面的计算来感受X个9在不同级别的可靠性差异。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3个9：(1-99.9%)*365*24=8.76小时，表示该系统在连续运行1年时间里最多可能的业务中断时间是8.76小时。&lt;/li&gt;
&lt;li&gt;4个9：(1-99.99%)*365*24=0.876小时=52.6分钟，表示该系统在连续运行1时间里最多可能的业务中断时间是52.6分钟。&lt;/li&gt;
&lt;li&gt;5个9：(1-99.999%)*365*24*60=5.26分钟，表示该系统在连续运行1年时间里最多可能的业务中断时间是5.26分钟。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么X个9里面的X只代表数字3~5，为什么没有1~2，也没有大于5的呢？接着往下计算：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1个9：(1-90%)*365=36.5天&lt;/li&gt;
&lt;li&gt;2个9：(1-99%)*365=3.65天&lt;/li&gt;
&lt;li&gt;6个9：(1-99.9999%)*365*24*60*60=31秒&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到1个9和2个9分别表示1年内业务可能中断的时间是36.5天、3.65天，这种级别的可靠性或许还达不到高可靠性；而6个9则表示1年内业务中断时间最多是31秒，这个级别的可靠性并非实现不了，而是要做到从5个9到6个9的可靠性提升要付出成本太高。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;可靠性&lt;/th&gt;
&lt;th&gt;级别&lt;/th&gt;
&lt;th&gt;年停机时间（分钟）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;99.9%&lt;/td&gt;
&lt;td&gt;3个9&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99.99%&lt;/td&gt;
&lt;td&gt;4个9&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99.999%&lt;/td&gt;
&lt;td&gt;5个9&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99.9999%&lt;/td&gt;
&lt;td&gt;6个9&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;【MTBF】即平均故障间隔时间，英文全称是：Mean Time Between Failure。是衡量一个产品的可靠性指标，单位为：小时。具体来说，是指相邻两次故障之间的平均工作时间，也称为平均故障间隔。概括的说，产品故障少的就是可靠性高，产品的故障总数与寿命单位总数之比叫：故障率（Failure rate）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【失效率】是指工作到某一时刻尚未失效的产品，在该时刻后单位时间内发生失效的概率。一般记为：λ，它也是时间t的函数，故也记为：λ(t)，称为失效率函数，有时也称为故障率函数或风险函数。
失效率 λ=1/MTBF，单位1FITs=10-9(1/h)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【MTTR】即平均修复时间，英文全称是：Mean Time To Repair。是指可修复产品的平均修复时间，就是从出现故障到修复中间的这段时间。MTTR越短表示易恢复性越好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【修复率】表示为：μ，英文全称是：Repair Rate，产品维修性的一种基本参数。修理时间已达到某个时刻但尚未修复的产品，在该时刻后的单位时间内完成修复的概率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;￼&lt;img src=&#34;../../images/1585456431/1337307870.jpg&#34; alt=&#34;avatar&#34;&gt;&lt;/p&gt;
- https://yangziran.com/posts/1585456431/ - </description>
        </item>
    
    
    
        <item>
        <title>如何利用Github Pages和Hugo搭建个人博客？</title>
        <link>https://yangziran.com/posts/1584969199/</link>
        <pubDate>Mon, 23 Mar 2020 21:13:19 +0800</pubDate>
        
        <guid>https://yangziran.com/posts/1584969199/</guid>
        <description>Nature https://yangziran.com/posts/1584969199/ -&lt;h3 id=&#34;github-pages-和-hugo-是什么&#34;&gt;Github Pages 和 Hugo 是什么？&lt;/h3&gt;
&lt;p&gt;Github Pages 是一个静态站点托管服务，直接将个人、组织或项目的页面托管于Github仓库中。
Hugo 是一个用Go语言编写的静态站点生成器，它针对速度、易用性和可配置性进行了优化，快速灵活。&lt;/p&gt;
&lt;h3 id=&#34;还有其他选择吗&#34;&gt;还有其他选择吗？&lt;/h3&gt;
&lt;p&gt;Jekyll、Hexo、Middleman等，这里不做过多说明。&lt;/p&gt;
&lt;h3 id=&#34;接下来看看如何一步一步地位自己搭建一个博客&#34;&gt;接下来，看看如何一步一步地位自己搭建一个博客！&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;注：以下步骤以在MacOS上的操作为例，其他操作系统类似，只是一些工具和命令有区别。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第0步安装gitgo并学习&#34;&gt;第0步：安装Git、Go并学习&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、如果你的电脑里未安装Git，到 &lt;a href=&#34;https://git-scm.com&#34;&gt;这里&lt;/a&gt; 下载安装，并学习相关操作，后续博客的发布都需要用到。&lt;/li&gt;
&lt;li&gt;2、到 &lt;a href=&#34;https://golang.org/dl&#34;&gt;这里&lt;/a&gt; 下载安装Go，只需要安装就可以。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第1步新建一个github库&#34;&gt;第1步：新建一个Github库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、注册一个Github账号。如果你已有账号，直接登录，如果你没有账号，注册并登录。&lt;/li&gt;
&lt;li&gt;2、打开Github Pages官网，浏览并了解User or organization site补发对应的操作步骤。
Github Pages：&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://pages.github.com&#34;&gt;https://pages.github.com&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;3、新建一个Github repository，库名为username.github.io，username即你的Github账号username。新建repository：&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://github.com/new&#34;&gt;https://github.com/new&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;，作为博客内容发布仓库，权限需要为 public。&lt;/li&gt;
&lt;li&gt;4、创建另外一个Github repository，库名随便取，这里就以blog命名，作为博客源码管理仓库，权限可以为private。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;../../images/1584969199/WX20200325-163613@2x.png&#34; alt=&#34;avatar&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注：一个账号只能有一个username.github.io仓库，我这里已经创建了就不能再创建。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第2步安装hugo&#34;&gt;第2步：安装Hugo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、浏览Hugo官方的安装指南进行初步了解，安装与你的操作系统对应的必要工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hugo安装指南：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;英文 &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://gohugo.io/getting-started/installing&#34;&gt;https://gohugo.io/getting-started/installing&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;中文 &lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://www.gohugo.org/doc/overview/installing&#34;&gt;https://www.gohugo.org/doc/overview/installing&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2、源码安装Hugo实例，源码方法适合所有平台&lt;/p&gt;
&lt;p&gt;在安装 Hugo 之前，先配置好 Go 的环境变量以及代理：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 配置环境变量
export GOPATH=$HOME/go // 需要根据自己操作系统配置

// 配置代理
go env -w GO111MODULE=on
go env -w GOPROXY=https://goproxy.cn,direct // 参考：https://goproxy.cn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装Hugo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go get -v github.com/gohugoio/hugo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;go get 将会获取 Hugo 以及所有依赖到你的 $GOPATH/src 目录，同时编译所有代码生成最终的 hugo （或 hugo.exe）二进制文件，这就全部准备好了&lt;/p&gt;
&lt;p&gt;你可以使用 -u 参数执行 go get 来更新 Hugo 的所有依赖&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go get -u -v github.com/gohugoio/hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第3步新建一个hugo网站&#34;&gt;第3步：新建一个Hugo网站&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、进入你想存放 Hugo 网站的目录。&lt;/li&gt;
&lt;li&gt;2、执行以下命令新建一个 Hugo 网站。
&lt;pre&gt;&lt;code&gt;hugo new site yangziran.github.io // &#39;yangziran.github.io&#39; 是我网站文件夹名。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时，会生成一个 yangziran.github.io 文件夹，&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第4步选择并克隆主题&#34;&gt;第4步：选择并克隆主题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;默认的 Hugo 是不带任何主题的，你可以在官网上 &lt;a href=&#34;https://themes.gohugo.io&#34;&gt;下载&lt;/a&gt; 很多免费开源的主题，基本上所有的主题都会自带安装方法，并且每个主题的 config 配置文件基本是不一样的
&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/AmazingRise/hugo-theme-diary.git themes/diary
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;然后修改 config.toml 或 config.yaml 增加一行
&lt;pre&gt;&lt;code&gt;theme = &amp;quot;diary&amp;quot; // diary 是我选择的主题文件夹的名称
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;然后使用 hugo server &amp;ndash;buildDrafts -w 即可访问 &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; 查看本地安装好的Hugo&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第5步编辑配置文件&#34;&gt;第5步：编辑配置文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;baseURL 即为你博客的域名，如果有自己的域名并且打算使用其访问，就在这里填上准备好的域名并且到 Github 上的仓库 Settings 的 Custom domain 填上 baseURL 中的内容并保存，建议勾选上 Enforce HTTPS；如果没有自己的域名，那就填上 youname.github.io（仓库名称）&lt;/li&gt;
&lt;li&gt;title 即为你博客的标题&lt;/li&gt;
&lt;li&gt;其他配置请自行参考你所选择的主题配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第6步新建一篇文章&#34;&gt;第6步：新建一篇文章&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;发布文章或页面的命令为
&lt;pre&gt;&lt;code&gt;hugo new posts/new-post.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;new-post 为文章或页面的名字，也可以采用时间戳命名: hugo new posts/$(date +%s).md&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;然后编辑 content/posts 目录下的 .md 文件，使用 Markdown 语法写文章&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第7步本地预览网站效果&#34;&gt;第7步：本地预览网站效果&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本地预览网站的命令为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server --buildDrafts -w
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;ndash;buildDrafts ：生成被标记为【草稿】的文档&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;-w ：监控更改，如果发生更改直接显示到博客上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第8步构建hugo网站&#34;&gt;第8步：构建Hugo网站&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在生成你的静态网页前，先将文章的 draft 改为 false&lt;/li&gt;
&lt;li&gt;然后在 youname.github.io 目录下执行 hugo&lt;/li&gt;
&lt;li&gt;此时所有生成的 HTML 文件都放在 youname.github.io/public 目录下&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第9步将网站目录转换为git库&#34;&gt;第9步：将网站目录转换为Git库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在这里会初始化 youname.github.io 和 public 两个 Git 仓库，并将 public 仓库添加为 youname.github.io 子模块
&lt;pre&gt;&lt;code&gt;git init
cd public
git init
git add .
git commit -am &amp;quot;first commit&amp;quot;
  
cd ..
git submodule add https://github.com/youname/youname.github.io.git
git add .
git commit -am &amp;quot;first commit&amp;quot;
  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第10步关联远程库并推送代码&#34;&gt;第10步：关联远程库并推送代码&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;```
git remote add origin https://github.com/youname/blog.git

cd public
git remote add origin https://github.com/youname/youname.github.io.git
git push -u origin master

cd ..
git push -u origin master
```
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;之后如何添加一篇博客&#34;&gt;之后如何添加一篇博客&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;1、新建一篇文章，编辑内容
2、本地预览网站呈现效果
3、构建Hugo网站
4、提交修改至Git仓库并推送到Github
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;参考&#34;&gt;参考：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Git：&lt;a href=&#34;https://git-scm.com/book/zh/v2&#34;&gt;https://git-scm.com/book/zh/v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github Pages：&lt;a href=&#34;https://help.github.com/cn/github/working-with-github-pages&#34;&gt;https://help.github.com/cn/github/working-with-github-pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hugo：&lt;a href=&#34;https://gohugo.io/documentation/&#34;&gt;https://gohugo.io/documentation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://yangziran.com/posts/1584969199/ - </description>
        </item>
    
    
    
        <item>
        <title>CentOS 7.7.1908 安装 MySQL 5.7.28-*.rpm-bundle.tar</title>
        <link>https://yangziran.com/posts/1584208079/</link>
        <pubDate>Sun, 15 Mar 2020 01:47:59 +0800</pubDate>
        
        <guid>https://yangziran.com/posts/1584208079/</guid>
        <description>Nature https://yangziran.com/posts/1584208079/ -&lt;h3 id=&#34;1卸载系统自带的mariadb-lib&#34;&gt;1、卸载系统自带的mariadb-lib&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# rpm -qa|grep mariadb
// mariadb-libs-5.5.64-1.el7.x86_64
# rpm -e mariadb-libs-5.5.64-1.el7.x86_64 —nodeps
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2下载mysql-5728-rpm-bundletar包并解压&#34;&gt;2、下载mysql 5.7.28-*.rpm-bundle.tar包并解压&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# tar -xvf mysql-5.7.28-1.el7.x86_64.rpm-bundle.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3安装&#34;&gt;3、安装&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;依次执行（几个包有依赖关系，需要按顺序）下面命令安装
# rpm -ivh mysql-community-common-5.7.28-1.el7.x86_64.rpm
# rpm -ivh mysql-community-libs-5.7.28-1.el7.x86_64.rpm
# rpm -ivh mysql-community-client-5.7.28-1.el7.x86_64.rpm
# rpm -ivh mysql-community-server-5.7.28-1.el7.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4运行并添加开机启动&#34;&gt;4、运行并添加开机启动&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# systemctl enable mysqld // 添加开机启动
# systemctl start mysqld // 启动MySQL服务
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5登录并修改密码&#34;&gt;5、登录并修改密码&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;在上一步启动MySQL服务的时候，会初始化MySQL并为root用户生成默认密码并将该密码标记为过期，登录后需要设置一个新的密码。
# cat /var/log/mysqld.log // 查看MySQL日志，搜索到：A temporary password is generated for root@localhost 后面就是生成的默认密码
# mysql -uroot -p // 用root用户登录MySQL
mysql&amp;gt; alter user ‘root’@‘localhost’ identified by ‘新密码’; // 密码要求：长度最少8位，大小写和特殊字符组成
mysql&amp;gt; create user ‘新用户’ identified by ‘新密码’; // 创建远程登录用户
mysql&amp;gt; grant all on *.* to 新用户; // 赋予新用户所有数据库的所有权限
mysql&amp;gt; flush privileges; // 刷新系统权限表
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6防火墙配置远程访问&#34;&gt;6、防火墙配置远程访问&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# firewall-cmd —permanent —zone=public —add-service=mysql // 永久开放mysql服务
# firewall-cmd —reload // 重新加载防火墙
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：新版的mysql数据库下的user表中已经没有password字段了，而是将加密后的用户密码存储于authentication_string字段。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;关闭密码强度审计&#34;&gt;关闭密码强度审计：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;方法一：
    mysql&amp;gt; set global validate_password_policy=0 // 密码复杂度
    mysql&amp;gt; set global validate_password_length=1 // 密码长度
方法二：
    在my.cnf的[mysqld]标签处末行添加以下项：
        validate-password=off
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;错误及解决方法&#34;&gt;错误及解决方法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;error：Failed dependencies:
    /usr/bin/perl is needed by mysql-community-server-5.7.28-1.el7.x86_64
    net-tools is needed by mysql-community-server-5.7.28-1.el7.x86_64
    perl(Getopt::Long) is needed by mysql-community-server-5.7.28-1.el7.x86_64
    perl(strict) is needed by mysql-community-server-5.7.28-1.el7.x86_64

解决方法：
    # yum install perl
    # yum install net-tools&lt;/code&gt;&lt;/pre&gt;
- https://yangziran.com/posts/1584208079/ - </description>
        </item>
    
    
  </channel>
</rss> 